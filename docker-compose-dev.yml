version: "3"
services:

  mysql:
    container_name: oh_mysql
    restart: always
    build: mysql
    command: mysqld --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: 'mypw' # TODO: Change this
    volumes:
      - oh_volume:/var/lib/mysql
    networks:
      - db_network

  oh:
    container_name: oh
    restart: always
    build :
      context: ./OpenHouse
      dockerfile: Dockerfile.dev
    ports:
      - '8000:8000'
    volumes:
      - ./OpenHouse:/oh
    networks:
      - db_network
    environment:
      - DEBUG=True
      - MYSQL_HOST=oh_mysql
      - MYSQL_PASSWORD=mypw

  nginx:
    build :
      context: ./nginx
      dockerfile: Dockerfile.dev
    container_name: nginx
    ports:
      - '80:80'
    networks:
      - db_network
    volumes:
      - ./OpenHouse/static:/oh/static:ro
      - ./OpenHouse/media:/oh/media:ro
      - ./log/nginx:/var/log/nginx
    depends_on:
      - oh
  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:0.10
    container_name: nginx-prometheus-exporter
    command: -nginx.scrape-uri http://nginx:80/stub_status
    ports:
      - 9113:9113
    networks:
      - db_network
    depends_on:
      - nginx

  prometheus:
    image: prom/prometheus:v2.35.0
    container_name: prometheus
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
      - ./prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    networks:
      - db_network
    ports:
      - '9090:9090'

  renderer:
    image: grafana/grafana-image-renderer:3.4.2
    environment:
      BROWSER_TZ: Asia/Taipei
    ports:
      - '8081:8081'
    networks:
      - db_network

  grafana:
    image: grafana/grafana:8.2.5
    container_name: grafana
    volumes:
      - ./grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: pass
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    depends_on:
      - prometheus
      - renderer
    ports:
      - '3000:3000'
    networks:
      - db_network

volumes:
  oh_volume:
      external: true
      name: oh_volume

networks:
  db_network:
    driver: bridge
