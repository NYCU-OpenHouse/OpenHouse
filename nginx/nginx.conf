map $remote_addr $allow_grafana_access {
    default 0;
    ~^114\.113\. 1;
}

upstream openhouse {
    server oh:8000;
}

upstream grafana {
    server grafana:3000;
}

log_format json_analytics escape=json '{'
                            '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
                            '"connection": "$connection", ' # connection serial number
                            '"connection_requests": "$connection_requests", ' # number of requests made in connection
                    '"pid": "$pid", ' # process pid
                    '"request_id": "$request_id", ' # the unique request id
                    '"request_length": "$request_length", ' # request length (including headers and body)
                    '"remote_addr": "$remote_addr", ' # client IP
                    '"remote_user": "$remote_user", ' # client HTTP username
                    '"remote_port": "$remote_port", ' # client port
                    '"time_local": "$time_local", '
                    '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
                    '"request": "$request", ' # full path no arguments if the request
                    '"request_uri": "$request_uri", ' # full path and arguments if the request
                    '"args": "$args", ' # args
                    '"status": "$status", ' # response status code
                    '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                    '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
                    '"http_referer": "$http_referer", ' # HTTP referer
                    '"http_user_agent": "$http_user_agent", ' # user agent
                    '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
                    '"http_host": "$http_host", ' # the request Host: header
                    '"server_name": "$server_name", ' # the name of the vhost serving the request
                    '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
                    '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
                    '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
                    '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
                    '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
                    '"upstream_response_length": "$upstream_response_length", ' # upstream response length
                    '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
                    '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
                    '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
                    '"scheme": "$scheme", ' # http or https
                    '"request_method": "$request_method", ' # request method
                    '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                    '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
                    '"gzip_ratio": "$gzip_ratio", '
                    '"http_cf_ray": "$http_cf_ray",'
                    '}';

server {

    listen 80;
    access_log /var/log/nginx/access.log json_analytics;
    error_log /var/log/nginx/error.log;

    server_name openhouse.osa.nycu.edu.tw;


    return 301 https://openhouse.osa.nycu.edu.tw$request_uri;
}

server {

    listen 443 ssl;
    
    access_log /var/log/nginx/access.log json_analytics;
    error_log /var/log/nginx/error.log;

    # HSTS 
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    ssl_certificate /etc/ssl/server.crt;

    ssl_certificate_key /etc/ssl/server.key;

    ssl_protocols TLSv1.2 TLSv1.3;

    server_name openhouse.osa.nycu.edu.tw;

    set $internalIP 0;
    if ($remote_addr = <IP>) {
        set $internalIP 1;
    }

    if (-f $document_root/under_maintenance.html) {
        set $underConstruction "${internalIP}1";
    }
    if ($underConstruction = "01") {
        return 503;
    }


    location / {
        proxy_pass http://openhouse;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
        client_max_body_size 20M;
    }
    location /static/ {
        alias /oh/static/;
    }
    location /media/ {
        alias /oh/media/;
    }

    location /grafana {
        if ($allow_grafana_access = 0) {
            return 403;
        }
        rewrite  ^/grafana/(.*)  /$1 break;
        proxy_pass http://grafana;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
    }

    location /nginx_status {
        stub_status;
        allow 127.0.0.1;
        deny all;
    }

    error_page 404 @404error;
    error_page 403 =404 @404error;

    location @404error {
        rewrite ^(.*)$ /404.html break;
    }

    error_page 503 @maintenance;
    location @maintenance {
        rewrite ^(.*)$ /under_maintenance.html break;
    }
}