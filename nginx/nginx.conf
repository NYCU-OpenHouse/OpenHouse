# map $remote_addr $allow_grafana_access {
#     default 0;
#     ~^114\.113\. 1;
# }

upstream openhouse {
    server oh:8000;
}

# upstream grafana {
#     server grafana:3000;
# }

log_format upstream_time '$remote_addr - $remote_user [$time_local] '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent"'
                             'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

server {

    listen 80;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server_name openhouse.osa.nycu.edu.tw;


    return 301 https://openhouse.osa.nycu.edu.tw$request_uri;
}

server {

    listen 443 ssl;
    
    access_log /var/log/nginx/access.log json_analytics;
    error_log /var/log/nginx/error.log;

    # HSTS 
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    ssl_certificate /etc/ssl/server.crt;

    ssl_certificate_key /etc/ssl/server.key;

    ssl_protocols TLSv1.2 TLSv1.3;

    server_name openhouse.osa.nycu.edu.tw;

    set $internalIP 0;
    if ($remote_addr = <IP>) {
        set $internalIP 1;
    }

    if (-f $document_root/under_maintenance.html) {
        set $underConstruction "${internalIP}1";
    }
    if ($underConstruction = "01") {
        return 503;
    }


    location / {
        proxy_pass http://openhouse;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
        client_max_body_size 20M;
    }
    location /static/ {
        alias /oh/static/;
    }
    location /media/ {
        alias /oh/media/;
    }

    # location /grafana {
    #     access_log off;
    #     if ($allow_grafana_access = 0) {
    #         return 403;
    #     }
    #     rewrite  ^/grafana/(.*)  /$1 break;
    #     proxy_pass http://grafana;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header Host $host;
    #     proxy_redirect off;
    # }

    location /nginx_status {
        stub_status;
        allow 127.0.0.1;
        deny all;
    }

    error_page 404 @404error;
    error_page 403 =404 @404error;

    location @404error {
        rewrite ^(.*)$ /404.html break;
    }

    error_page 503 @maintenance;
    location @maintenance {
        rewrite ^(.*)$ /under_maintenance.html break;
    }
}